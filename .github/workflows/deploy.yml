name: 🚀 Deploy to Raspberry Pi

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      # Base environment variables
      APP_ENV: prod
      APP_SECRET: ${{ secrets.APP_SECRET_PROD }}
      APP_DEBUG: 0
      # DATABASE environment variables
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      # BACKEND environment variables
      CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
      CORS_ALLOW_ORIGIN: ${{ secrets.CORS_ALLOW_ORIGIN }}
      JWT_SECRET_KEY: ${{ vars.JWT_SECRET_KEY }}
      JWT_PUBLIC_KEY: ${{ vars.JWT_PUBLIC_KEY }}
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
      MAILER_DSN: ${{ secrets.MAILER_DSN_PROD }}
      MAILER_FROM_ADDRESS: ${{ secrets.MAILER_FROM_ADDRESS }}
      FRONTEND_URL: ${{ vars.FRONTEND_URL_PROD }}
      SERVER_NAME: ${{ vars.SERVER_NAME }}
      SERVER_NAME_FRONT: ${{ vars.SERVER_NAME_FRONT }}
      FRONT_PORT: ${{ vars.FRONT_PORT }}
      # FRONTEND environment variables
      VITE_MAPBOX_TOKEN: ${{ secrets.VITE_MAPBOX_TOKEN }}
      VITE_API_URL: ${{ vars.VITE_API_URL }}
      # For Docker tag
      REPOSITORY: chloethoma/rncp_van_app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/bake-action@v6
        with:
          pull: true
          push: true
          load: false
          files: |
            compose.yaml
            compose.prod.yaml
          set: |
            php.tags=ghcr.io/${{ env.REPOSITORY }}/php:prod
            frontend.tags=ghcr.io/${{ env.REPOSITORY }}/frontend:prod
            *.cache-from=type=gha,scope=${{ github.ref }}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{ github.ref }},mode=max

  deploy:
    name: 🚀 Deploy to Raspberry Pi
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Connect & deploy on Raspberry Pi
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.RASPBERRY_HOST }}
          username: ${{ secrets.RASPBERRY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.RASPBERRY_PORT }}
          script: |
            set -e

            echo "🧑‍💻 Configuring Git identity..."
            git config --global user.name "${{ secrets.GIT_USERNAME }}"
            git config --global user.email "${{ secrets.GIT_EMAIL }}"

            echo "🔁 Updating repo..."
            cd RNCP_van_app
            git fetch origin
            git rebase origin/main

            echo "🧪 Setting up env vars..."
            cat > .env.prod <<EOF
            APP_ENV=prod
            APP_SECRET=${{ secrets.APP_SECRET_PROD }}
            # DATABASE environment variables
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            # BACKEND environment variables
            CORS_ALLOW_ORIGIN=${{ secrets.CORS_ALLOW_ORIGIN }}
            CADDY_MERCURE_JWT_SECRET=${{ secrets.CADDY_MERCURE_JWT_SECRET }}
            JWT_SECRET_KEY=${{ vars.JWT_SECRET_KEY }}
            JWT_PUBLIC_KEY=${{ vars.JWT_PUBLIC_KEY }}
            JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
            MAILER_DSN=${{ secrets.MAILER_DSN_PROD }}
            MAILER_FROM_ADDRESS=${{ secrets.MAILER_FROM_ADDRESS }}
            SERVER_NAME=${{ vars.SERVER_NAME }}
            SERVER_NAME_FRONT=${{ vars.SERVER_NAME_FRONT }}
            FRONT_PORT=${{ vars.FRONT_PORT }}
            FRONTEND_URL=${{ vars.FRONTEND_URL }}
            # FRONTEND environment variables
            VITE_MAPBOX_TOKEN=${{ secrets.VITE_MAPBOX_TOKEN }}
            VITE_API_URL=${{ vars.VITE_API_URL }}
            EOF

            echo "🌍 Setting frontend env..."
            cat > frontend/.env <<EOF
            VITE_MAPBOX_TOKEN=${{ secrets.VITE_MAPBOX_TOKEN }}
            VITE_API_URL=${{ vars.VITE_API_URL }}
            EOF

            echo "📦 Pulling latest Docker image..."
            sudo docker compose --env-file .env.prod -f compose.yaml -f compose.prod.yaml pull

            echo "🚀 Restarting services..."
            sudo docker compose --env-file .env.prod -f compose.yaml -f compose.prod.yaml up -d

            echo "🔐 Regenerating JWT keys if needed..."
            sudo docker exec -i php php bin/console lexik:jwt:generate-keypair --skip-if-exists

            echo "🐳 Currently running containers:"
            sudo docker ps